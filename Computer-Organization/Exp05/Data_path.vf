////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Data_path.vf
// /___/   /\     Timestamp : 05/22/2017 21:45:12
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath C:/Users/poi/Desktop/Computer_Organization/Hardware-Series-Class/Computer-Organization/Exp05/ipcore_dir -intstyle ise -family kintex7 -verilog C:/Users/poi/Desktop/Computer_Organization/Hardware-Series-Class/Computer-Organization/Exp05/Data_path.vf -w C:/Users/poi/Desktop/Computer_Organization/Hardware-Series-Class/Computer-Organization/Exp05/Data_path.sch
//Design Name: Data_path
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module ALU_MUSER_Data_path(A, 
                           ALU_operation, 
                           B, 
                           overflow, 
                           res, 
                           zero);

    input [31:0] A;
    input [2:0] ALU_operation;
    input [31:0] B;
   output overflow;
   output [31:0] res;
   output zero;
   
   wire N0;
   wire [32:0] S;
   wire [31:0] XLXN_16;
   wire [31:0] XLXN_19;
   wire [31:0] XLXN_23;
   wire [31:0] XLXN_24;
   wire [31:0] XLXN_31;
   wire [31:0] XLXN_32;
   wire [31:0] XLXN_33;
   wire [31:0] res_DUMMY;
   
   assign res[31:0] = res_DUMMY[31:0];
   and32  XLXI_1 (.A(A[31:0]), 
                 .B(B[31:0]), 
                 .res(XLXN_23[31:0]));
   or32  XLXI_2 (.A(A[31:0]), 
                .B(B[31:0]), 
                .res(XLXN_24[31:0]));
   ADC32  XLXI_3 (.A(A[31:0]), 
                 .B(XLXN_16[31:0]), 
                 .C0(ALU_operation[2]), 
                 .S(S[32:0]));
   xor32  XLXI_4 (.A(A[31:0]), 
                 .B(B[31:0]), 
                 .res(XLXN_31[31:0]));
   nor32  XLXI_5 (.A(A[31:0]), 
                 .B(B[31:0]), 
                 .res(XLXN_32[31:0]));
   srl32  XLXI_6 (.A(A[31:0]), 
                 .B(B[31:0]), 
                 .res(XLXN_33[31:0]));
   xor32  XLXI_7 (.A(XLXN_19[31:0]), 
                 .B(B[31:0]), 
                 .res(XLXN_16[31:0]));
   MUX8T1_32  XLXI_8 (.I0(XLXN_23[31:0]), 
                     .I1(XLXN_24[31:0]), 
                     .I2(S[31:0]), 
                     .I3(XLXN_31[31:0]), 
                     .I4(XLXN_32[31:0]), 
                     .I5(XLXN_33[31:0]), 
                     .I6(S[31:0]), 
                     .I7({N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, S[32]}), 
                     .s(ALU_operation[2:0]), 
                     .o(res_DUMMY[31:0]));
   or_bit_32  XLXI_9 (.A(res_DUMMY[31:0]), 
                     .o(zero));
   SignalExt_32  XLXI_13 (.S(ALU_operation[2]), 
                         .So(XLXN_19[31:0]));
   GND  XLXI_14 (.G(N0));
endmodule
`timescale 1ns / 1ps

module Data_path(ALUSrc_B, 
                 ALU_Control, 
                 Branch, 
                 clk, 
                 Data_in, 
                 inst_field, 
                 Jump, 
                 MemtoReg, 
                 RegDst, 
                 RegWrite, 
                 rst, 
                 ALU_out, 
                 Data_out, 
                 PC_out);

    input ALUSrc_B;
    input [2:0] ALU_Control;
    input Branch;
    input clk;
    input [31:0] Data_in;
    input [25:0] inst_field;
    input Jump;
    input MemtoReg;
    input RegDst;
    input RegWrite;
    input rst;
   output [31:0] ALU_out;
   output [31:0] Data_out;
   output [31:0] PC_out;
   
   wire [31:0] Imm_32;
   wire N0;
   wire [31:0] PC_4;
   wire V5;
   wire [31:0] XLXN_10;
   wire [31:0] XLXN_12;
   wire [31:0] XLXN_15;
   wire XLXN_18;
   wire XLXN_24;
   wire [31:0] XLXN_26;
   wire [31:0] XLXN_28;
   wire [4:0] XLXN_32;
   wire [31:0] XLXN_33;
   wire [31:0] ALU_out_DUMMY;
   wire [31:0] Data_out_DUMMY;
   wire [31:0] PC_out_DUMMY;
   
   assign ALU_out[31:0] = ALU_out_DUMMY[31:0];
   assign Data_out[31:0] = Data_out_DUMMY[31:0];
   assign PC_out[31:0] = PC_out_DUMMY[31:0];
   REG32  PC (.CE(V5), 
             .clk(clk), 
             .D(XLXN_15[31:0]), 
             .rst(rst), 
             .Q(PC_out_DUMMY[31:0]));
   ALU_MUSER_Data_path  U1_1 (.A(XLXN_26[31:0]), 
                             .ALU_operation(ALU_Control[2:0]), 
                             .B(XLXN_28[31:0]), 
                             .overflow(), 
                             .res(ALU_out_DUMMY[31:0]), 
                             .zero(XLXN_24));
   Regs  U2_2 (.clk(clk), 
              .L_S(RegWrite), 
              .rst(rst), 
              .R_addr_A(inst_field[25:21]), 
              .R_addr_B(inst_field[20:16]), 
              .Wt_addr(XLXN_32[4:0]), 
              .Wt_data(XLXN_33[31:0]), 
              .rdata_A(XLXN_26[31:0]), 
              .rdata_B(Data_out_DUMMY[31:0]));
   add_32  XLXI_2 (.a(PC_out_DUMMY[31:0]), 
                  .b({N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, V5, N0, 
         N0}), 
                  .c(PC_4[31:0]));
   add_32  XLXI_3 (.a(PC_4[31:0]), 
                  .b({Imm_32[29:0], N0, N0}), 
                  .c(XLXN_10[31:0]));
   MUX2T1_32  XLXI_4 (.I0(PC_4[31:0]), 
                     .I1(XLXN_10[31:0]), 
                     .s(XLXN_18), 
                     .o(XLXN_12[31:0]));
   MUX2T1_32  XLXI_5 (.I0(XLXN_12[31:0]), 
                     .I1({PC_4[31:28], inst_field[25:0], N0, N0}), 
                     .s(Jump), 
                     .o(XLXN_15[31:0]));
   AND2  XLXI_6 (.I0(XLXN_24), 
                .I1(Branch), 
                .O(XLXN_18));
   MUX2T1_32  XLXI_9 (.I0(ALU_out_DUMMY[31:0]), 
                     .I1(Data_in[31:0]), 
                     .s(MemtoReg), 
                     .o(XLXN_33[31:0]));
   MUX2T1_5  XLXI_10 (.I0(inst_field[20:16]), 
                     .I1(inst_field[15:11]), 
                     .s(RegDst), 
                     .o(XLXN_32[4:0]));
   MUX2T1_32  XLXI_11 (.I0(Data_out_DUMMY[31:0]), 
                      .I1(Imm_32[31:0]), 
                      .s(ALUSrc_B), 
                      .o(XLXN_28[31:0]));
   Ext_32  XLXI_12 (.imm_16(inst_field[15:0]), 
                   .Imm_32(Imm_32[31:0]));
   VCC  XLXI_13 (.P(V5));
   GND  XLXI_14 (.G(N0));
endmodule
